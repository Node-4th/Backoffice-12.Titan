generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int      @id @default(autoincrement()) @map("id")
  nickname     String   @unique @map("nickname")
  email        String?  @unique @map("email")
  password     String   @map("password")
  phone        String   @map("phone")
  address      String?  @map("address")
  profileImage String?  @map("profileImage")
  role         Role     @map("role")
  clientId     String?  @map("clientId")
  name         String?  @map("name")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  orders  Orders[]
  carts   Carts[]
  reviews Reviews[]

  @@map("Users")
}

model Stores {
  id           Int      @id @default(autoincrement()) @map("id")
  ownerId      Int      @unique @map("ownerId")
  storeName    String   @map("storeName")
  category     Category @map("category")
  storeImage   String   @map("storeImage")
  storeIntro   String   @map("storeIntro")
  storeRate    Float    @map("storeRate")
  orderCount   Int      @default(0) @map("orderCount")
  status       Status   @map("status")
  storeAddress String   @map("storeAddress")
  storePhone   String   @map("storePhone")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  menu    Menu[]
  orders  Orders[]
  reviews Reviews[]
  carts   Carts[]

  @@map("Stores")
}

model Carts {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @unique @map("userId")
  storeId   Int      @map("storeId")
  menuId    Int      @map("menuId")
  quantity  Int      @default(1) @map("quantity")
  orderId   Int?     @map("orderId")
  status    Status   @map("status")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  users  Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stores Stores  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menu   Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders Orders? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Carts")
}

model Menu {
  id        Int    @id @default(autoincrement()) @map("id")
  storeId   Int    @map("storeId")
  menuName  String @map("menuName")
  menuInfo  String @map("menuInfo")
  price     Int    @map("price")
  menuImage String @map("menuImage")

  store Stores @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  carts Carts[]

  @@map("Menu")
}

model Orders {
  id         Int      @id @default(autoincrement()) @map("id")
  storeId    Int      @map("storeId")
  userId     Int      @map("userId")
  totalPrice Int      @map("totalPrice")
  status     String   @map("status")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")

  Store Stores @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Users Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  carts   Carts[]
  reviews Reviews[]

  @@map("Orders")
}

model Reviews {
  id          Int      @id @default(autoincrement()) @map("id")
  userId      Int      @map("userId")
  storeId     Int      @map("storeId")
  orderId     Int      @map("orderId")
  contents    String   @map("contents")
  stars       Int      @map("stars")
  reviewImage String   @map("reviewImage")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")

  store Stores @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Reviews")
}

enum Role {
  CUSTOMER
  OWNER
}

enum Status {
  AVAILABLE
  UNAVAILABLE
}

enum Category {
  CHICKEN
  ASIAN
  WESTERN
  KOREAN
  CHINESE
  JAPANESE
  PIZZA
  DESSERT
}
